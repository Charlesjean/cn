<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Keep it Simple and Stupid]]></title>
  <link href="http://Charlesjean.github.io//cn/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://Charlesjean.github.io//cn/"/>
  <updated>2014-05-17T15:13:31+08:00</updated>
  <id>http://Charlesjean.github.io//cn/</id>
  <author>
    <name><![CDATA[Duanjin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS中Core Animation的使用]]></title>
    <link href="http://Charlesjean.github.io//cn/blog/2014/05/02/core-animation/"/>
    <updated>2014-05-02T21:26:21+08:00</updated>
    <id>http://Charlesjean.github.io//cn/blog/2014/05/02/core-animation</id>
    <content type="html"><![CDATA[<p>用户体验是用户在使用一款软件和系统时，对软件和系统能得到的最直观的感受，iOS一直因为良好的用户体验而受到大家的赞赏，流畅的操作和丰富的动画无疑给iOS的用户体验加了不少分。对于我们编程人员来说，iOS中提供了强大的Core Animation库，并封装了友好的API，使我们能够实现复杂的动画效果。</p>

<p>Core Animation提供了两种动画的类型，并封装成类CABasicAnimation和CAKeyframeAnimation，我们需要针对自己的目标来选择使用这两种类。动画的实现过程实际上就是在一定时间内连续播放一系列的视频帧，在iOS中要求60帧/秒，通常情况下，我们实现动画的做法是给出动画在一定时间内的<code>关键帧</code>，然后利用<code>差值</code>的方法得到关键帧之间的所有帧序列的状态。CABasicAnimation 和 CAKeyframeAnimation的最大区别就是</p>

<blockquote><pre><code>  CABasicAnimation要求我们只能提供动画的第一帧和最后一帧，然后系统利用我们指定的插值方法，计算出整个动画的所有序列；
    而利用CAKeyframeAnimation我们可以给出动画过程中的多个关键帧，然后同样系统利用我们制定的插值方法，计算出连续的两个关键帧之间的所有序列，从而实现动画。 
    可以看到，利用CAKeyframeAnimation，我们对动画有更多的控制权，因此大多数比较复杂的动画也需要选用CAKeyframeAnimation。
</code></pre></blockquote>

<p>我在<a href="https://github.com/Charlesjean/CoreAnimationDemo">demo</a>中实现了两种动画效果，动画并不算复杂，但是却能很好的了解这两种动画类的使用，并且由于动画是作用在CALayer之上，因此CALayer的相关知识也是我们能够正确的使用Core Animation的基础，在例子中你也可以看到一些CALayer的属性，如anchor point，transform等是如何使用的。demo的效果如下：
<video width='' height='' preload='none' controls poster=''><source src='https://raw.githubusercontent.com/Charlesjean/CoreAnimationDemo/master/demo.mp4">https://raw.githubusercontent.com/Charlesjean/CoreAnimationDemo/master/demo.mp4</a>' ></video></p>

<p>当我们在屏幕上滑动时，view controller会移除当前view（currentView），并添加新的view（nextView），并通过动画来达到比较优美的效果。Demo中含有两种动画效果，当我们像左滑动时，触发了folder animation，当我们向右滑时触发了accordion animation。</p>

<h4>Render tree 和 Presentation tree</h4>

<p>CALayer与UIView类似，对于一个有UIView组成的View Hierarchy，同样也有一个对应的Layer Hierarchy。但是Layer Hierarchy又对应两种不同的树结构，我们称作Render tree 和 Presentation tree，理解了render tree和presentation tree后，有利于我们解决动画过程当中的某些问题（在动画开始和结束时候的可能出现的闪烁问题）。</p>

<p>我们以一个例子来解释这两个概念。
在CALayer中很多属性是可以触发动画的，我们看如下简单代码：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">layer</span><span class="p">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIColor</span> <span class="n">redColor</span><span class="p">].</span><span class="n">CGColor</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
在layer的背景色被改变后，我们可以看到动画中layer的颜色会由原来的颜色，慢慢过渡为红色。在动画中我们看到的layer的状态（颜色随时间而变化）就是presentation tree中layer的状态，而当动画结束后，layer最终呈现的状态就是render tree中的状态。换句话说，动画中我们改变的是presentation tree中layer的状态，而不是layer最终呈现的状态，如果我们将改变颜色的一个CABasicAnimation对象作用到layer上，动画会呈现出来（presentation tree）而layer在动画结束的瞬间仍然会变回原来的颜色（render tree）。</p>

<h4>Folder Animation</h4>

<p>Folder动画给我们的感觉是类似翻书的效果，要实现这个动画我们首先需要考虑如何将动画分解，及动画中我们将涉及到CALayer的布局如何，我们实现动画所需要改变的属性是什么。按照folder动画的效果，我们可以将这个动画分解为下图所示：</p>

<p><img src="https://raw.githubusercontent.com/Charlesjean/cn/master/source/_posts/folder.png" alt="" /></p>

<p>直观上我们可以看到图中包含了三个CALayer，黄色的leftLayer，绿色的rightLayer，已经处于旋转状态的rotateLayer。动画的整个过程就是rotateLayer绕Y轴旋转180度的过程。</p>

<p>folder动画应该满足的要求为：
*   rotateLayer在旋转的时候应该有透视（Perspective）的效果
*   rotateLayer似乎有两个面，正面显示的内容为currentView的右半部分，反面显示的为nextView的左半部分</p>

<p>查看代码，在FolderAnimation.mm中，我们可以看到以下的变量声明
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">FolderAnimation</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CATransformLayer</span><span class="o">*</span> <span class="n">animationLayer</span><span class="p">;</span><span class="c1">//rotateLayer</span>
</span><span class='line'><span class="n">CALayer</span><span class="o">*</span> <span class="n">frontAnimationLayer</span><span class="p">;</span>
</span><span class='line'><span class="n">CALayer</span><span class="o">*</span> <span class="n">backAnimationLayer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">CALayer</span><span class="o">*</span> <span class="n">currentViewHalfLayer</span><span class="p">;</span><span class="c1">//leftLayer</span>
</span><span class='line'><span class="n">CALayer</span><span class="o">*</span> <span class="n">nextViewHalfLayer</span><span class="p">;</span><span class="c1">//rightLayer</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
我们实际需要使用5个Layer来完成这个动画，其中需要旋转并带有透视效果的layer我们选择的是CATransformLayer，在CATransformLayer上，我们需要放置两个CALayer，作为它的"正面"和"反面"。</p>

<p>CALayer的绘制是二维的，也就是说在将CALayer的整个Layer Hierarchy绘制到屏幕上之前，CALayer当中所有的layer都会被先绘制到一张bitmap上面，然后系统再将这张bitmap显示出来。这种绘制方式决定了，我们的要求2无法满足，也就是说一个layer不可能有两个不同的面，这种情况下我们就需要使用CATransformLayer。CATransformLayer允许我们建立三维的Layer Hierarchy，也就是说它的所有的Sub Layer存在于一个三维的空间内，我们可以对他们进行旋转、平移等操作，也正是由于CATransformLayer模拟了三维的空间，所以它可以提供给我们透视（perspective）的效果（具体可以参见CATransformLayer的文档）。</p>

<p>建立好了用于动画的Layer Hierarchy之后，下一步就是要向rotateLayer添加动画，因为本例中只涉及了一个转动的动画，所以我们选择使用CABasicAnimation
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">CABasicAnimation</span><span class="o">*</span> <span class="n">animation</span> <span class="o">=</span> <span class="p">[</span><span class="n">CABasicAnimation</span> <span class="nl">animationWithKeyPath:</span><span class="s">@&quot;transform&quot;</span><span class="p">];</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">removedOnCompletion</span> <span class="o">=</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="n">CATransform3D</span> <span class="n">transform</span> <span class="o">=</span> <span class="n">CATransform3DIdentity</span><span class="p">;</span>
</span><span class='line'><span class="n">transform</span> <span class="o">=</span> <span class="n">CATransform3DRotate</span><span class="p">(</span><span class="n">transform</span><span class="p">,</span>  <span class="n">direction</span> <span class="o">*</span> <span class="n">M_PI</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">transform</span><span class="p">.</span><span class="n">m34</span> <span class="o">=</span> <span class="n">direction</span> <span class="o">*</span> <span class="mf">1.0</span><span class="o">/</span><span class="mi">1000</span><span class="p">;</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">toValue</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nl">valueWithCATransform3D:</span><span class="n">transform</span><span class="p">];</span>
</span><span class='line'><span class="n">animation</span><span class="p">.</span><span class="n">duration</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">duration</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">animationLayer</span> <span class="nl">addAnimation:</span><span class="n">animation</span> <span class="nl">forKey:</span><span class="n">Nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
动画的代码比较简单，我们将图中的rotateLayer旋转了180度，需要注意的有两点：</p>

<ul>
<li>1.transform.m34的设置是为了产生透视效果，至于transform的意义涉及到图形学中的视图投影矩阵的内容，会在另一篇文章中阐述</li>
<li>2.animation.delegate的设置是为了监听动画的结束，以便做一些动画结束时的工作（保证presentation tree的最后状态与render tree一致）。</li>
</ul>


<h4>Accordion Animation</h4>

<p>相对于folder animation来说accordion animation的实现要复杂许多。
下图示意了Accordion的过程：</p>

<p><img src="https://raw.githubusercontent.com/Charlesjean/cn/master/source/_posts/accordition.png" alt="" /></p>

<p>其中A、B、C为“表面上”看起来需要做动画的Layer，在C向右<code>移动</code>的过程中，A和B需要一边向右<code>移动</code>一边绕轴<code>转动</code>,再仔细想一下，还有以下要求：</p>

<ul>
<li> 1.A和B在转动的过程中需要有透视的效果,即A和B的父Layer需要是一个CATransformLayer</li>
<li> 2.移动与转动过程中A 与 C需要一直保持邻接，即A的边在X方向的移动速度要与C的移动速度相同</li>
<li> 3.在移动和转动过程中A 与 B需要一直保持邻接，A与B在X方向上具有相同的移动速度</li>
<li> 4.B的最右边，即红色的线，需要保持不变，B的红边须保持“不动”</li>
</ul>


<p>相对于folder动画，accordion不再是只在某一个layer上实现动画，而是多个layer结合起来实现动画，而且过程中多了许多限制条件。
我们将整个动画分解为如下部分：</p>

<ul>
<li>A和B绕绿色的轴转动</li>
<li>A和B的父layer，向右运动（保持B与红线始终相接）的同时向后运动（保持B的红边大小不变，中和透视效果）</li>
<li>C按照一定的速率向右运动</li>
</ul>


<p>由于我们需要控制各个layer移动的速度，CABasicAnimation明显不能够满足我们的要求，因此必须使用CAKeyframeAnimation。在代码中你可以看到这个动画的具体实现，关于各种速度的关系，还需针对转动和移动的关系进行一定的数学计算。在实现的过程中还有不少细节需要注意，如果对代码或者整个animation的实现设计有疑问可以留言，我会一一解答。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS并行开发之GCD的使用]]></title>
    <link href="http://Charlesjean.github.io//cn/blog/2014/04/19/ios-concurrent-program1/"/>
    <updated>2014-04-19T09:11:24+08:00</updated>
    <id>http://Charlesjean.github.io//cn/blog/2014/04/19/ios-concurrent-program1</id>
    <content type="html"><![CDATA[<p>在移动App开发中，用户体验是我们在开发过程中必须考虑的问题，实时的相应用户的交互事件，是对一个App最基本的要求，因此程序的并行就显得尤其重要，因此在iOS中，程序的并行并不仅仅是为了加快某些操作的速度，更重要的我们是为了不要阻塞用户在主线程上的交互。iOS提供给我们不同级别的并行的接口，包括NSThread、Grand Central Dispatch（GCD）和NSOperationQueue，来满足我们在不同情形下的需要。</p>

<p>不同的api使用的复杂程度也不同，GCD和NSOperationQueue是建立在NSThread的基础之上，提供给了我们更加高层次的抽象，因此在使用中，我们应该尽量的使用GCD与NSOperationQueu，主要有一下原因：</p>

<ul>
<li>GCD和NSOperationQueue提供给了我们更加友好的接口，使用起来更加方便灵活</li>
<li>GCD和NSOperationQueue仍然是以NSThread为基础来实现的，他们的本质是在系统中维护了一个线程池。当我们放入其中的任务被运行时，运行的单位仍然是线程池中的线程</li>
<li>GCD和NSOperationQueue可以根据系统当前的繁忙状态来决定线程池中可以并发的线程数，这样可以防止过多的线程同时并发，导致系统性能的下降。</li>
</ul>


<p>这里我主要是总结一下并行库的一些知识，还有一个小的<a href="https://github.com/Charlesjean/iOSConcurrentTest">Demo</a>，展示了api的基本用法。</p>

<p>GCD是iOS提供的比较便捷的并行api，我们可以很方便的将包含我们操作的block放在GCD的<code>dispatch queue</code>当中，然后任务就会在线程池中运行。iOS提供给了我们五中不同优先级的dispatch queue，三种不同优先级的背景队列,主线程对应的main queue，以及一个用户IO 操作的背景队列。我们也可以通过系统提供的接口，自己创建新的dispatch queue。</p>

<h4>Dispatch Queue</h4>

<p>一般情况下，系统提供的队列就可以满足我们的要求
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="kt">long</span> <span class="n">priority</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">flags</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
我们也可以使用系统api <code>dispatch_queue_create</code>创建自己的队列，并指定队列的类型（串行队列或者并行队列），然后利用<code>dispatch_async</code>或者<code>dispatch_sync</code>将block放入队列中执行，一旦我们将操作放入队列中之后，我们便失去了对这些操作的控制，完全由系统决定他们的实行时间，如果你需要在某些时候取消队列中的操作，那么你需要使用NSOperationQueue。</p>

<h5>多线程时的资源访问的保护</h5>

<p>由于我们的操作在线程池中时并行执行的（除非你的dispatch queue为顺序的），因此如果我们操作中有对资源的写操作，那么我们就需要实现资源的互斥访问，可以通过<code>dispatch_barrier_async</code>来方便的做到这一点
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_queue_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">concurrentQueue</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">DISPATCH_QUEUE_CONCURRENT</span><span class="p">);</span>
</span><span class='line'><span class="c1">//if we want to add an item to array , and this method is called in blocks in the queue</span>
</span><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">insertString:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">str</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dispatch_barrier_async</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">array</span> <span class="nl">addObject:</span><span class="n">str</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<code>dispatch_barrier_async</code>确保了我们所有的插入操作都是安全的，它确保了<code>addObject</code>语句在queue中所有在其之前插入的block执行完之后才执行。</p>

<h5>Dispatch Group</h5>

<p>Dispatch Group的作用是我们可以集中的处理属于同一group的block，比如我们想要在某几个block全都执行完毕后，将他们的执行结果整合起来：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">dispatch_group_t</span> <span class="n">group</span> <span class="o">=</span> <span class="n">dispatch_group_create</span><span class="p">();</span>
</span><span class='line'><span class="n">dispatch_queue_t</span> <span class="n">queue</span> <span class="o">=</span> <span class="n">dispatch_get_global_queue</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span><span class="n">queue</span><span class="p">,</span><span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//some operation</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span><span class='line'><span class="n">dispatch_group_async</span><span class="p">(</span><span class="n">group</span><span class="p">,</span><span class="n">queue</span><span class="p">,</span><span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c1">//some other operation</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">//perform some tasks when all operations are done</span>
</span><span class='line'><span class="n">dispatch_group_notify</span><span class="p">(</span><span class="n">group</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span><span class="o">^</span><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">MyLabel</span><span class="p">.</span><span class="n">setText</span><span class="p">(</span><span class="s">@&quot;All operations are done&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
只有当同一group当中的所有block都执行完之后，<code>MyLabel</code>才会发出通知。</p>

<p>GCD还有很多其他的使用和实现的细节，你可以通过<a href="https://developer.apple.com/library/ios/DOCUMENTATION/General/Conceptual/ConcurrencyProgrammingGuide/ConcurrencyProgrammingGuide.pdf">文档</a>还获得更多的内容</p>
]]></content>
  </entry>
  
</feed>
