<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Keep it Simple and Stupid]]></title>
  <link href="http://Charlesjean.github.io//cn/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://Charlesjean.github.io//cn/"/>
  <updated>2014-06-08T15:04:57+08:00</updated>
  <id>http://Charlesjean.github.io//cn/</id>
  <author>
    <name><![CDATA[Duanjin Chen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android ART 与 Dalvik虚拟机比较]]></title>
    <link href="http://Charlesjean.github.io//cn/blog/2014/05/26/android-art-vs-dalvik/"/>
    <updated>2014-05-26T21:39:15+08:00</updated>
    <id>http://Charlesjean.github.io//cn/blog/2014/05/26/android-art-vs-dalvik</id>
    <content type="html"><![CDATA[<p>长久以来Android给人们的印象都是反应速度慢，不够流畅，这也是我之前对android的印象，在接触了Android4.4、从事了android的开发后，我觉得Android之所以给人们不够流畅的原因有以下几点：</p>

<ul>
<li>与iOS不同的是，Android手机型号众多，配置更是各种各样，以我之前用的HTC手机为例，2012年出厂的手机装配了Android4.0的系统，但是系统的内存却只有512M，开机后app的可用内存只有可怜的360M，这种配置的手机怎么可能有好的表现，不卡才怪。而iOS的手机型号固定，配置起码都是1G的内存，运行流畅是必然的。</li>
<li>Android市场对app的审核不如iOS严格，致使Android App的质量良莠不齐，很多开发者并没有对app进行足够的性能优化，成功如微博客户端，在滑动的时候仍不够流畅，其他的app质量可想而知。</li>
<li>最根本的一点是，Dalvik虚拟机在作怪。</li>
</ul>


<p>大家都知道，Java为了达到跨平台的目的，在编译时将源代码转化为了字节码，Android的Dalvik虚拟机亦是如此，在我们运行app时，系统必须将字节码转换为机器码，然后运行，这种机制就是Dalvik使用的JIT（Just-in-time compilation）机制。在运行时才将字节码转化为机器码，这可以说是android app不够流畅的根本原因，因为我们无法消除将字节码转化为机器码的这部分时间。</p>

<p>Android4.4引入了ART，即Android Runtime，与Dalvik不同的是，ART在我们第一次安装app时，会自动将app转化为机器码，从而确保了app运行时的时间（去除了JIT compile的时间），因此开启ART后，android app流畅度会有一个不错的提升。但是目前，ART有如下问题：</p>

<ul>
<li>某些app在ART下无法运行。这应该是针对一小部分app，因为我目前为止在我的手机上没有发现这个问题</li>
<li>由于在首次安装时需要将app转化为机器码，因此app的安装时间会有所增加。我在使用过程中也没有明显的感觉到这一点，可以说这点不会妨碍一般的用户。</li>
</ul>


<p>可以说ART很好的解决了android不够流畅的问题，并且对于普通用户，并没有带来使用的负面影响，况且现在ART还在进一步的改进和开发当中，相信以后在流畅度，安装时间等各个方面会做的更好。 对于我们开发者，ART也带来了实际的好处。</p>

<p>相信很多开发者会遇到一个问题，就是在Android中，如果你的ViewGroup嵌套层次太多，那么很可能会遇到StackOverflowError这个运行时错误，产生这个错误的原因是由于View Hierarchy在绘制过程中，函数调用的深度超出了系统主线程的Stack frame。在Android4.4中，Dalvik的UI线程的Stack frame只有16K，过多的嵌套很容易造成StackOverflowError，而对于程序，很难从根本上解决这个问题（优化view hierarchy被认为是唯一可行的方法，但实用性却是有限的）。我在试验中发现，ART已经很好的解决了这个问题，即使view group的嵌套达到了60层，仍然不会出现在Dalvik中的crash。</p>

<p>由此可见，ART正在试图解决一些Dalvik中存在的性能等各个方面的问题，或许Android5.0的时候，ART能够成型，那Android必然会向前迈一大步，用户体验可以得到很大的改观（当然像之前说的HTC的那种奇葩配置的机器，永远不可能有好的流畅度）。</p>

<p>由于Android生态的多样性，各个生产商的Android都有很大的不同，我们应该通过比较来区分优劣，Android有自己的特点，包括Android App的设计原则都不同于iOS，作为Android用户，我们需要的不是iOS，而是Android自己的个性，Android的特色。越来越对Android充满信心，相信Android很快可以做的更好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Windows下Android Device Manager无法找到Nexus5]]></title>
    <link href="http://Charlesjean.github.io//cn/blog/2014/05/22/nexus5-windows-debug/"/>
    <updated>2014-05-22T21:50:49+08:00</updated>
    <id>http://Charlesjean.github.io//cn/blog/2014/05/22/nexus5-windows-debug</id>
    <content type="html"><![CDATA[<p>一直用公司的MAC开发Android，在将Nexus5连接到自己的Windows上时，发现ADT中无法找到Nexus5，adb devices命令也无法检测到设备，虽然设备能够以磁盘的方式显示在Windows Explorer中，但是似乎设备的驱动仍然没有正确的安装：</p>

<ul>
<li>打开windows 设备管理器可以发现，Nexus5设备标识上有一黄色叹号，表示驱动没有正确安装</li>
<li>下载Nexus5 <a href="http://developer.android.com/sdk/win-usb.html#top">设备驱动</a>，并解压至某一目录</li>
<li>在设备管理器中，右键点击设备，并更新驱动</li>
<li>选中刚才解压的目录，即可正确的安装驱动</li>
</ul>


<p>Issue Fixed ：）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Android SDK Manager无法下载SDK的问题]]></title>
    <link href="http://Charlesjean.github.io//cn/blog/2014/05/20/goagent-android-sdk-download/"/>
    <updated>2014-05-20T22:31:33+08:00</updated>
    <id>http://Charlesjean.github.io//cn/blog/2014/05/20/goagent-android-sdk-download</id>
    <content type="html"><![CDATA[<p>计算机应用可以说是少数国内与国外技术差别比较小的领域，主要原因是网络的帮助，使我们很方便的看到国外的技术文档与很多优秀的文章，但是很多时候国内的环境确实令人非常气愤，居然Android SDK网站都会被墙，以至于Android SDK Manager根本无法下载。解决方法是安装并打开goagent，并将SDK Manager的Proxy设置为<code>127.0.0.1:8087</code>。如果不知道goagent的话，那就好好搜索一下吧，国内的环境，基本上这个是必备的了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android通过代码设置控件点击时颜色变化]]></title>
    <link href="http://Charlesjean.github.io//cn/blog/2014/03/30/android-statelistdrawable-and-colorstatelist/"/>
    <updated>2014-03-30T12:54:00+08:00</updated>
    <id>http://Charlesjean.github.io//cn/blog/2014/03/30/android-statelistdrawable-and-colorstatelist</id>
    <content type="html"><![CDATA[<p>在UI设计时，我们通常希望用户得到及时的交互反馈，例如在按钮上发生点击事件，或者textView上发生点击时，我们通常采用highlight一个控件的方法，提醒用户点击事件的发生。我们通常会通过改变控件的背景颜色或者字体的颜色来达到高亮的效果，Android提供了两个类，StateListDrawable和ColorStateList来支持这种操作。</p>

<p>在Android的<a href="http://developer.android.com/guide/topics/resources/color-list-resource.html">官方文档</a>以及网上很多资料中，我们可以看到这种高亮的支持都会通过编写xml来实现的。个人认为xml的实现方式虽然简单、可复用，但是如果我们有很多种状态，或者要动态的产生不同的颜色效果，那么XML的方式会使我们的工程中增加很多的resource文件，作为一个Programmer我更喜欢通过代码来达到相同的目的。本文所用的例子比较简单，仅仅是对一个textview做了高亮设置，当用户点击textiew时，会改变其背景色和字体颜色，可以在<a href="https://github.com/Charlesjean/FragmentTest">这里</a>下载代码。关键代码如下:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="cm">/*</span>
</span><span class='line'><span class="cm">*Add statedrawable for targetView to display different drawable when</span>
</span><span class='line'><span class="cm">* view is in different state</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addStateDrawable</span><span class="o">(</span><span class="n">View</span> <span class="n">targetView</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">StateListDrawable</span> <span class="n">listDrawable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StateListDrawable</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">//add drawable used when view is pressed</span>
</span><span class='line'>    <span class="n">listDrawable</span><span class="o">.</span><span class="na">addState</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">attr</span><span class="o">.</span><span class="na">state_pressed</span><span class="o">},</span> <span class="k">new</span> <span class="n">ColorDrawable</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">rgb</span><span class="o">(</span><span class="mi">106</span><span class="o">,</span><span class="mi">170</span><span class="o">,</span><span class="mi">234</span><span class="o">)));</span>
</span><span class='line'>    <span class="c1">//show gray background for all other state</span>
</span><span class='line'>    <span class="n">listDrawable</span><span class="o">.</span><span class="na">addState</span><span class="o">(</span><span class="n">StateSet</span><span class="o">.</span><span class="na">WILD_CARD</span><span class="o">,</span> <span class="k">new</span> <span class="n">ColorDrawable</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">GRAY</span><span class="o">));</span>
</span><span class='line'>    <span class="n">targetView</span><span class="o">.</span><span class="na">setBackgroundDrawable</span><span class="o">(</span><span class="n">listDrawable</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * set different text color for different state</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addColorState</span><span class="o">(</span><span class="n">TextView</span> <span class="n">targetView</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[][]</span> <span class="n">states</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">new</span> <span class="kt">int</span><span class="o">[]{</span><span class="n">android</span><span class="o">.</span><span class="na">R</span><span class="o">.</span><span class="na">attr</span><span class="o">.</span><span class="na">state_pressed</span><span class="o">},</span>
</span><span class='line'>            <span class="n">StateSet</span><span class="o">.</span><span class="na">WILD_CARD</span><span class="o">};</span>
</span><span class='line'>    <span class="kt">int</span><span class="o">[]</span> <span class="n">colors</span> <span class="o">=</span> <span class="o">{</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">,</span> <span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">};</span>
</span><span class='line'>    <span class="n">ColorStateList</span> <span class="n">coloList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ColorStateList</span><span class="o">(</span><span class="n">states</span><span class="o">,</span> <span class="n">colors</span><span class="o">);</span>
</span><span class='line'>    <span class="n">targetView</span><span class="o">.</span><span class="na">setTextColor</span><span class="o">(</span><span class="n">coloList</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>StateListDrawable 提供了<code>addState</code>接口，使我们能够对应每一种状态，设置一个drawable；ColorStateList同样使我们为每一种状态指定一种字体颜色。 其中<code>StateSet.WILD_CARD</code>表示去除当前已有状态外的其他所有状态。</p>

<p>所谓状态就是指随着用户的交互，View所出的不同的状态。 其中<code>state_pressed</code>表示<code>when the user is pressing down in a view.</code>,更多对状态的描述可以参考<a href="http://developer.android.com/reference/android/graphics/drawable/StateListDrawable.html">android 文档</a> (个人认为android的很多文档写得很烂，完全是对字面意思的解释，这一点与iOS根本无法相比)。</p>

<h3>使用StateListDrawable和ColorStateList需要注意的事项</h3>

<ul>
<li>首先由于控件的状态是随着用户的点击等事件而改变的，所以要想使之前的代码能起作用，我们必须确保view能够接受用户的点击事件，最基本的必须用<code>setClickable(true)</code>,使控件可以点击</li>
<li>由于android对点击等事件的传递有一定的规则，要使<code>StateListDrawable</code>和<code>ColorStateList</code>起作用，最根本上要保证view的<strong>onTouchEvent</strong>函数能够被调用到，即TouchEvent不能被其他的对象 如<code>ParentView</code>和<code>TouchListener</code>所截断。(如果view注册了EventListener那么事件就会在传给onTouchEvent()函数之前，被EventListener截断)。</li>
</ul>


<p>关于Android中事件的传递机制，可以参考<a href="">这篇文章</a>。</p>
]]></content>
  </entry>
  
</feed>
